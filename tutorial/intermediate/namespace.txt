Namespaces in C++ provide a way to organize code into logical units and prevent naming conflicts. They help in avoiding naming collisions between different parts of your program, especially when using libraries or creating large projects. Here's an overview of namespaces in C++:

1. Namespace Declaration:
   - You can declare a namespace using the `namespace` keyword followed by the namespace name.
   - Example of namespace declaration:
     ```cpp
     namespace MyNamespace {
         // Declarations and definitions
     }
     ```

2. Using a Namespace:
   - To use the entities (functions, classes, variables) within a namespace, you can either fully qualify them with the namespace name or use a `using` directive.
   - Example of using a namespace:
     ```cpp
     using namespace MyNamespace; // Imports all entities from MyNamespace

     int main() {
         MyClass obj; // Accessing MyClass from MyNamespace
         // Code using MyClass
         return 0;
     }
     ```

3. Qualified Names:
   - You can use the fully qualified name of an entity to access it directly without importing the entire namespace.
   - Example of using a qualified name:
     ```cpp
     int main() {
         MyNamespace::MyClass obj; // Accessing MyClass from MyNamespace directly
         // Code using MyClass
         return 0;
     }
     ```

4. Nested Namespaces:
   - You can define namespaces within other namespaces, creating a hierarchical structure.
   - Example of nested namespaces:
     ```cpp
     namespace OuterNamespace {
         // Declarations and definitions

         namespace InnerNamespace {
             // Declarations and definitions
         }
     }
     ```

5. Anonymous Namespace:
   - An anonymous namespace is a namespace without a name, and its contents are only visible within the current translation unit (source file).
   - It is useful for creating unique names within a file and avoiding potential naming conflicts.
   - Example of an anonymous namespace:
     ```cpp
     namespace {
         // Declarations and definitions
     }
     ```

6. Using Aliases:
   - You can create an alias for a namespace or a specific entity within a namespace using the `namespace` keyword and the `using` directive.
   - Example of creating a namespace alias:
     ```cpp
     namespace alias = MyNamespace; // Creates an alias for MyNamespace

     int main() {
         alias::MyClass obj; // Accessing MyClass using the alias
         // Code using MyClass
         return 0;
     }
     ```

Namespaces provide a way to logically organize code, prevent naming conflicts, and improve code readability. They are particularly useful when working with large projects, libraries, or collaborating with other developers. By using namespaces effectively, you can create modular and maintainable codebases.